{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/durga41003/Project22/blob/main/product%20true%20sale\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mpldates\n",
        "pd.options.display.float_format='{:.2f}'.format\n",
        "data=pd.read_csv(\"/bigmarket sales.csv\")\n",
        "data.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 618
        },
        "id": "4VkbNFsIvEGn",
        "outputId": "6e0ca3a2-d657-4560-9bfe-773da2013375"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-77493472-e4ab-4df7-b39a-24f915617d66\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "      <th>Unnamed: 12</th>\n",
              "      <th>Unnamed: 13</th>\n",
              "      <th>Unnamed: 14</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.02</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.81</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.02</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.27</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.02</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.62</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.09</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.86</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>FDP36</td>\n",
              "      <td>10.39</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Baking Goods</td>\n",
              "      <td>51.40</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>556.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>FDO10</td>\n",
              "      <td>13.65</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.01</td>\n",
              "      <td>Snack Foods</td>\n",
              "      <td>57.66</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>343.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>FDP10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.13</td>\n",
              "      <td>Snack Foods</td>\n",
              "      <td>107.76</td>\n",
              "      <td>OUT027</td>\n",
              "      <td>1985</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type3</td>\n",
              "      <td>4022.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>FDH17</td>\n",
              "      <td>16.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.02</td>\n",
              "      <td>Frozen Foods</td>\n",
              "      <td>96.97</td>\n",
              "      <td>OUT045</td>\n",
              "      <td>2002</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 2</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>1076.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>FDU28</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Frozen Foods</td>\n",
              "      <td>187.82</td>\n",
              "      <td>OUT017</td>\n",
              "      <td>2007</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 2</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>4710.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77493472-e4ab-4df7-b39a-24f915617d66')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-77493472-e4ab-4df7-b39a-24f915617d66 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-77493472-e4ab-4df7-b39a-24f915617d66');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "  Item_Identifier  Item_Weight  ... Unnamed: 13  Unnamed: 14\n",
              "0           FDA15         9.30  ...         NaN          NaN\n",
              "1           DRC01         5.92  ...         NaN          NaN\n",
              "2           FDN15        17.50  ...         NaN          NaN\n",
              "3           FDX07        19.20  ...         NaN          NaN\n",
              "4           NCD19         8.93  ...         NaN          NaN\n",
              "5           FDP36        10.39  ...         NaN          NaN\n",
              "6           FDO10        13.65  ...         NaN          NaN\n",
              "7           FDP10          NaN  ...         NaN          NaN\n",
              "8           FDH17        16.20  ...         NaN          NaN\n",
              "9           FDU28        19.20  ...         NaN          NaN\n",
              "\n",
              "[10 rows x 15 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hkxvdf6uuIyj",
        "outputId": "32d58164-922f-496d-d0fa-c17c7f1653e1"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier                 0\n",
              "Item_Weight                  1463\n",
              "Item_Fat_Content                0\n",
              "Item_Visibility                 0\n",
              "Item_Type                       0\n",
              "Item_MRP                        0\n",
              "Outlet_Identifier               0\n",
              "Outlet_Establishment_Year       0\n",
              "Outlet_Size                  2410\n",
              "Outlet_Location_Type            0\n",
              "Outlet_Type                     0\n",
              "Item_Outlet_Sales               0\n",
              "Unnamed: 12                  8523\n",
              "Unnamed: 13                  8523\n",
              "Unnamed: 14                  8522\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ot=data[\"Outlet_Type\"]\n",
        "ot_list=[]\n",
        "for x in ot:\n",
        "  ot_list.append(x)\n",
        "count_sm1=ot_list.count(\"Supermarket Type1\")\n",
        "count_sm2=ot_list.count(\"Supermarket Type2\")\n",
        "count_sm3=ot_list.count(\"Supermarket Type3\")\n",
        "count_gs=ot_list.count(\"Grocery store\")\n",
        "sizes=[count_sm1,count_sm2,count_sm3,count_gs]\n",
        "labels=[\"supermarket1\",\"supermarket2\",\"supermarket3\",\"grocery store\"]\n",
        "plt.pie(sizes,labels=labels,autopct=\"%.2f\")\n",
        "plt.axes().set_aspect(\"equal\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "8UEzvb5J2ERQ",
        "outputId": "9ad8f930-affd-48d9-feb3-cac86d325f51"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:12: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
            "  if sys.path[0] == '':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "item_id=data[\"Item_Identifier\"]\n",
        "ot_sales=data[\"Item_Outlet_Sales\"]\n",
        "plt.bar(item_id[0:10],ot_sales[0:10])\n",
        "plt.xlabel(\"ITEM_IDENTIFIER\")\n",
        "plt.ylabel(\"ITEM-OUTLET-SALES\")\n",
        "plt.title(\"SALES\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "xMTlIrJLH-68",
        "outputId": "e84842be-7b63-496e-f797-690ed52043c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}